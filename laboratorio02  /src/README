# Sistema Bancário

Este projeto é um sistema bancário simples implementado em Java, utilizando conceitos de Programação Orientada a Objetos (POO) e o padrão de arquitetura **MVC (Model-View-Controller)**. O sistema permite cadastrar clientes, criar contas, realizar depósitos, saques e transferências, além de salvar e carregar dados de um arquivo CSV.

---

## Estrutura do Projeto

O projeto está organizado nas seguintes pastas e pacotes:

- `src/`: Contém os arquivos fonte do projeto.
  - `model/`: Contém as classes de modelo, como `Cliente`, `Conta`, `Movimentacao`, `Agencia`, `ContaCorrente`, `ContaPoupanca`, `ContaSalario`.
  - `view/`: Contém a classe `Visao`, responsável pela interação com o usuário.
  - `controller/`: Contém a classe `Controlador`, que gerencia a lógica de negócios.
  - `exceptions/`: Contém as classes de exceções personalizadas, como `SaldoInsuficienteException` e `LimiteDeSaquesException`.
  - `utils/`: Contém utilitários, como o `GerenciadorDeArquivos`.
- `bin/`: Diretório onde os arquivos `.class` compilados serão armazenados.

---

## Pré-requisitos

- **Java Development Kit (JDK)**: Certifique-se de ter o JDK instalado (versão 8 ou superior).
- **Terminal ou Prompt de Comando**: Para compilar e executar o projeto.

---

## Compilação

Para compilar o projeto, siga os passos abaixo:

1. Abra o terminal ou prompt de comando.
2. Navegue até o diretório raiz do projeto (onde o arquivo `App.java` está localizado).
3. Execute o seguinte comando para compilar todos os arquivos Java:

    ```sh
    javac -d bin -sourcepath src src/App.java src/model/*.java src/view/*.java src/controller/*.java src/exceptions/*.java src/utils/*.java
    ```

   Esse comando compilará todos os arquivos `.java` e colocará os arquivos `.class` resultantes no diretório [bin](http://_vscodecontentref_/0).

---

## Execução

Após a compilação, siga os passos abaixo para executar o projeto:

1. No terminal, ainda no diretório raiz do projeto, execute o seguinte comando:

    ```sh
    java -cp bin App
    ```

   Esse comando executará a aplicação a partir do diretório [bin](http://_vscodecontentref_/1).

---

## Funcionalidades

O sistema oferece as seguintes funcionalidades:

- **Cadastro de Clientes**: Permite cadastrar novos clientes no sistema.
- **Cadastro de Contas**: Permite criar novas contas associadas a clientes existentes.
  - Tipos de contas suportados: Poupança, Corrente e Salário.
- **Depósitos**: Permite realizar depósitos em contas.
- **Saques**: Permite realizar saques de contas, verificando o saldo disponível e o limite de saques (no caso de contas salário).
- **Transferências**: Permite realizar transferências entre contas, verificando o saldo disponível e a agência de destino.
- **Persistência de Dados**: Os dados das agências e contas são salvos e carregados automaticamente em arquivos `.csv`.
- **Exclusão de Contas**: Permite excluir contas, transferindo ou sacando o saldo restante antes da exclusão.
- **Exibição de Extrato**: Permite exibir o extrato de transações de uma conta específica.

---

## Estrutura das Classes

### **Pacote `model`**
- **`Cliente`**: Representa um cliente do banco.
- **`Conta`**: Classe abstrata que representa uma conta bancária.
- **`ContaCorrente`**: Representa uma conta corrente, com taxa de manutenção.
- **`ContaPoupanca`**: Representa uma conta poupança, com taxa de rendimento.
- **`ContaSalario`**: Representa uma conta salário, com limite de saques.
- **`Agencia`**: Representa uma agência bancária, que gerencia várias contas.
- **`Movimentacao`**: Representa uma movimentação financeira (depósito, saque, transferência).

### **Pacote `view`**
- **`Visao`**: Responsável pela interação com o usuário (entrada e saída de dados).

### **Pacote `controller`**
- **`Controlador`**: Gerencia a lógica de negócios e interage com as camadas de modelo e visão.

### **Pacote `exceptions`**
- **`SaldoInsuficienteException`**: Lançada quando o saldo é insuficiente para uma operação.
- **`LimiteDeSaquesException`**: Lançada quando o limite de saques de uma conta salário é atingido.

### **Pacote `utils`**
- **`GerenciadorDeArquivos`**: Responsável por salvar e carregar os dados das agências e contas em arquivos `.csv`.

### **Classe Principal**
- **`App`**: Classe principal que inicia a aplicação.

---

## Como Usar

1. **Cadastro de Cliente**:
   - No menu principal, escolha a opção "Cadastro de Usuário".
   - Insira os dados do cliente (nome, CPF, senha, email, telefone).

2. **Cadastro de Conta**:
   - No menu principal, escolha a opção "Cadastro de Conta".
   - Insira o CPF do cliente, o número da agência, o número da conta, o tipo de conta e o saldo inicial.

3. **Operações Bancárias**:
   - No menu principal, escolha a opção "Operações Bancárias".
   - Escolha entre consultar saldo, depositar, sacar ou transferir.
   - Para transferências, insira o CPF do destinatário, o número da agência de destino e o número da conta de destino.

4. **Exclusão de Conta**:
   - No menu principal, escolha a opção "Gerenciar Conta".
   - Insira o CPF do cliente e a senha.
   - Escolha a conta a ser excluída e siga as instruções para transferir ou sacar o saldo restante antes da exclusão.

5. **Exibir Extrato**:
   - No menu principal, escolha a opção "Exibir Extrato".
   - Insira o número da agência e o número da conta para visualizar o extrato de transações.

6. **Sair**:
   - No menu principal, escolha a opção "Sair" para encerrar o programa e salvar os dados automaticamente.

---

## Exemplo de Uso

1. Cadastre um cliente.
2. Crie uma conta para o cliente.
3. Realize depósitos e saques.
4. Transfira valores entre contas.
5. Consulte o saldo das contas.
6. Exclua uma conta, transferindo ou sacando o saldo restante.
7. Exiba o extrato de transações de uma conta.

---

## Observações

- O sistema utiliza exceções personalizadas para tratar erros específicos, como saldo insuficiente ou limite de saques excedido.
- Os dados são salvos e carregados automaticamente em arquivos `.csv` usando o `GerenciadorDeArquivos`.

---